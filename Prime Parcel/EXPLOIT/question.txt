I've generated eight specific primes using the strings s1 and s2 and chosen one of them as an initial padding to the flag and encrypted the padded flag using the script given below. 

s1 = JdTlUzWk
s2 = HaOeHiDL
flag = c24652004eeace485e4026b88713180017b78a2a17584a8495000d544db6c01b170415eeac1857440de88108

The padded flag is in the format: "p1 flag" where p1 is the chosen prime.

cat <<EOF > flag.py
#!/usr/bin/python3
import os
flag = open('flag_ctf.txt', 'r').read().strip().encode()
print(flag)


class Encrypt:
    def __init__(self):
        self.key = os.urandom(6)

    def encrypt(self, text: bytes) -> bytes:
        cipher = b''
        for i in range(len(text)):
            cipher += bytes([text[i] ^ self.key[i % len(self.key)]])
        return cipher

    def decrypt(self, text: bytes) -> bytes:
        return self.encrypt(text)


crypto = Encrypt()
print('flag= ', crypto.encrypt(flag).hex())

EOF