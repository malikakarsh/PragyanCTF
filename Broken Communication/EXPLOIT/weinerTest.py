from Crypto.Util import number
from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCD
import owiener

p = 7741802571627804067643079435971705454932085324064804053047353233571989180168237446929476055773926029266390047355726546521886340201835336551763899701718843
q = 8541662763621578262802241785790215140214888552862384547335041988547799156859997033538506709398573681915711594411575078990064698979552749275869317435332019

e = 49021223420824032294575444337842664303659750592143989444346054309603440492775268654740750646154577199983231748104696333989408685866260184512430700588674016904760325272678306950185297232076982110968115039955042262569727950472571690980754170956553663654235748865752528926561864131231922710204977192321137288399
n = 66127866749382990493477163276430644453647695624334995188086456100669920148213670269845759053423673254332402160627157685339145491308779705315762969363954774452825663551444659323949452355916378323030776609439650018934209821520482796767784390070995410394768644427915964279983737069473408342964412902992693534017
d = 1321002892130907363304772307533938730810765133568799587587377646493338204703
phi = (p-1)*(q-1)
'''
d = owiener.attack(e, n)

if d is None:
    print("Failed")
else:
    print("Hacked d={}".format(d))
'''
flag = b"p_ctf{0nly_1f_y0u_kn0w_1t_4ll}"
#ct = pow(bytes_to_long(flag), e, n)
#ct = 29011448789667532500837595094422622999346838322373796961790056538252836540674940341482440624300758342622263016622113051092443575971982039553506690891613127725265256864590070304002132576852701354498100266486254744700180750140575252713000370458690255315552316726371428502751910185791602824967813578414846467186
print(ct)
dt = pow(ct, d, n)
print(long_to_bytes(dt))

'''
#testing on the script for oracle LSB attack:
flag = "1"
for i in range(1,136):
	p,q,e,d,t,n = keyGen()
	flag_enc = encrypt(message,e,n)
	inv = inverse(2**i, n)
	chosen_ct = long_to_bytes((bytes_to_long(flag_enc)*pow(inv, e, n)) % n)
	output = (decrypt(chosen_ct,d,n).hex())[-1]
	print(output)
	flag_char = (ord(output) - (int(flag, 2)*inv) % n) % 2
	print("Bit recovered: ", flag_char)
	flag = str(flag_char) + flag
	if len(flag) % 8 == 0:
		print(long_to_bytes(int(flag, 2)))
'''
